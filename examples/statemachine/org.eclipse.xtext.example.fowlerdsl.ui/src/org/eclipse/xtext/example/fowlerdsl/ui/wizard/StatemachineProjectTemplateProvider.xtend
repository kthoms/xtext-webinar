/*
 * generated by Xtext
 */
package org.eclipse.xtext.example.fowlerdsl.ui.wizard


import org.eclipse.core.runtime.Status
import org.eclipse.jdt.core.JavaCore
import org.eclipse.xtext.ui.XtextProjectHelper
import org.eclipse.xtext.ui.util.PluginProjectFactory
import org.eclipse.xtext.ui.wizard.template.IProjectGenerator
import org.eclipse.xtext.ui.wizard.template.IProjectTemplateProvider
import org.eclipse.xtext.ui.wizard.template.ProjectTemplate

import static org.eclipse.core.runtime.IStatus.*

/**
 * Create a list with all project templates to be shown in the template new project wizard.
 * 
 * Each template is able to generate one or more projects. Each project can be configured such that any number of files are included.
 */
class StatemachineProjectTemplateProvider implements IProjectTemplateProvider {
	override getProjectTemplates() {
		#[new SimpleStatemachineExampleWithFile]
	}
}

@ProjectTemplate(label="Statemachine example", icon="project_template.png", description="<p><b>Simple statemachine example</b></p>
<p>This is a project wizard to create a simple statemachine example.</p>")
final class SimpleStatemachineExampleWithFile {
	val advanced = check("Advanced:", false)
	val advancedGroup = group("Properties")
	val generateFile = check("Generate example file?",true,advancedGroup)
	val name = text("Custom State:", "MyCustomState", "The name of a custom state", advancedGroup)
	val path = text("Package:", "statemachine", "The package path to place the files in", advancedGroup)

	override protected updateVariables() {
		name.enabled = advanced.value && generateFile.value
		path.enabled = advanced.value && generateFile.value
		if (!advanced.value) {
			name.value = "Xtext"
			path.value = "statemachine"
		}
	}

	override protected validate() {
		if (path.value.matches('[a-z][a-z0-9_]*(/[a-z][a-z0-9_]*)*'))
			null
		else
			new Status(ERROR, "Wizard", "'" + path + "' is not a valid package name")
	}

	override generateProjects(IProjectGenerator generator) {
		generator.generate(new PluginProjectFactory => [
			projectName = projectInfo.projectName
			location = projectInfo.locationPath
			projectNatures += #[JavaCore.NATURE_ID, "org.eclipse.pde.PluginNature", XtextProjectHelper.NATURE_ID]
			builderIds += JavaCore.BUILDER_ID
			folders += "src"
			if(generateFile.value) {
				addFile('''src/«path»/Model.statemachine''', '''
					
					events
						doorClosed	D1CL
						drawOpened	D2OP
						lightOn		L1ON
						doorOpened	D1OP
						panelClosed PNCL
					end
					
					
					state «name»
						// Custom State
					end
				''')
			}
		])
	}
}
